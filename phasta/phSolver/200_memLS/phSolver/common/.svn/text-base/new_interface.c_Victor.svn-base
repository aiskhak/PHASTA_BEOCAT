/* This file provides interface functions for 'partial ' random 
   access into the PHASTA input files 

   Anil Karanam March 2001 */

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include <time.h>
#include "mpi.h"
#include "phastaIO.h"

#include <stdio.h>
#include <sys/types.h>
#include <time.h>

#include <sys/time.h>
#include <sys/resource.h>
#include <unistd.h>

double tmrc_local(void)
{

  int rc;
  struct timeval tv;

  rc = gettimeofday (&tv, NULL);
  if (rc == -1) {
    fprintf(stderr,"tmrc_local: gettimeofday\n");
    return 0.;
  }
  double t1 =  ((double) tv.tv_sec) + 1.e-6 * ((double) tv.tv_usec);

  return t1;
}

#ifdef intel
#include <winsock2.h>
#define Write_Restart WRITE_RESTART
#define Write_Error   WRITE_ERROR
#define Write_Displ   WRITE_DISPL
#define Write_Field   WRITE_FIELD
#else
#include <unistd.h>
#include <strings.h>
#if (!defined IBM )
#define Write_Restart write_restart_
#define Write_Error   write_error_
#define Write_Displ   write_displ_
#define Write_Field   write_field_
#else
#define Write_Restart write_restart
#define Write_Error   write_error
#define Write_Displ   write_displ
#define Write_Field   write_field
#endif
#endif

extern char phasta_iotype[80];

void 
Write_Restart(  int* pid, 
                int* stepno, 
                int* nshg, 
                int* numVars,
                double* array1, 
                double* array2 ) {

    char fname[255];
    char rfile[60];
    char existingfile[30], linkfile[30];
    int irstou;
    int magic_number = 362436;
    int* mptr = &magic_number;
    time_t timenow = time ( &timenow);
    double version=0.0;
    int isize, nitems;
    int iarray[10];

    sprintf(rfile,"restart.%d.%d",*stepno,*pid+1);
    openfile_(rfile,"write", &irstou);

    /* writing the top ascii header for the restart file */

    writestring_( &irstou,"# PHASTA Input File Version 2.0\n");
    writestring_( &irstou,
                  "# format \"keyphrase : sizeofnextblock usual headers\"\n");

    bzero( (void*)fname, 255 );
    sprintf(fname,"# Output generated by phasta version (NOT YET CURRENT): %lf \n", version);
    writestring_( &irstou, fname );

    bzero( (void*)fname, 255 );
    gethostname(fname,255);
    writestring_( &irstou,"# This result was produced on: ");
    writestring_( &irstou, fname );
    writestring_( &irstou,"\n");

    bzero( (void*)fname, 255 );
    sprintf(fname,"# %s\n", ctime( &timenow ));
    writestring_( &irstou, fname );

    isize = 1;
    nitems = 1;
    iarray[ 0 ] = 1;
    writeheader_( &irstou, "byteorder magic number ", 
                  (void*)iarray, &nitems, &isize, "integer", phasta_iotype );
    
    nitems = 1;
    writedatablock_( &irstou, "byteorder magic number ",
                     (void*)mptr, &nitems, "integer", phasta_iotype );
    
    
    bzero( (void*)fname, 255 );
    sprintf(fname,"number of modes : < 0 > %d\n", *nshg);
    writestring_( &irstou, fname );
    
    bzero( (void*)fname, 255 );
    sprintf(fname,"number of variables : < 0 > %d\n", *numVars);
    writestring_( &irstou, fname );
        
    
    isize = (*nshg)*(*numVars);
    nitems = 3;
    iarray[ 0 ] = (*nshg);
    iarray[ 1 ] = (*numVars);
    iarray[ 2 ] = (*stepno);
    writeheader_( &irstou, "solution ", 
                  (void*)iarray, &nitems, &isize, "double", phasta_iotype );
    
        
    nitems = (*nshg)*(*numVars);
    writedatablock_( &irstou, "solution ",
                     (void*)(array1), &nitems, "double", phasta_iotype );
        
   

    nitems = 3;
    writeheader_( &irstou, "time derivative of solution ", 
                  (void*)iarray, &nitems, &isize, "double", phasta_iotype );
    
    
    nitems = (*nshg)*(*numVars);
    writedatablock_( &irstou, "time derivative of solution ",
                     (void*)(array2), &nitems, "double", phasta_iotype );

        
    closefile_( &irstou, "write" );
      
    MPI_Barrier(MPI_COMM_WORLD);

    /* create a soft link of the restart we just wrote to restart.latest
     this is the file the next run will always try to start from */

    sprintf( linkfile, "restart.latest.%d", *pid+1 );
    unlink( linkfile );
    sprintf( existingfile, "restart.%d.%d", *stepno, *pid+1 );
    link( existingfile, linkfile );
}

void 
Write_Error(  int* pid, 
              int* stepno, 
              int* nshg, 
              int* numVars,
              double* array1 ) { 


    char fname[255];
    char rfile[60];
    int irstou;
    int magic_number = 362436;
    int* mptr = &magic_number;
    time_t timenow = time ( &timenow);
    double version=0.0;
    int isize, nitems;
    int iarray[10];

    sprintf(rfile,"restart.%d.%d",*stepno,*pid+1);
    openfile_(rfile,"append", &irstou);

    isize = (*nshg)*(*numVars);
    nitems = 3;
    iarray[ 0 ] = (*nshg);
    iarray[ 1 ] = (*numVars);
    iarray[ 2 ] = (*stepno);
    writeheader_( &irstou, "errors", (void*)iarray, &nitems, &isize, "double", phasta_iotype );
    
        
    nitems = (*nshg)*(*numVars);
    writedatablock_( &irstou, "errors ", (void*)(array1), &nitems, "double", phasta_iotype );

    closefile_( &irstou, "append" );
    
}


void 
Write_Displ(  int* pid, 
              int* stepno, 
              int* nshg, 
              int* numVars,
              double* array1 ) { 


    char fname[255];
    char rfile[60];
    int irstou;
    int magic_number = 362436;
    int* mptr = &magic_number;
    time_t timenow = time ( &timenow);
    double version=0.0;
    int isize, nitems;
    int iarray[10];

    sprintf(rfile,"restart.%d.%d",*stepno,*pid+1);
    openfile_(rfile,"append", &irstou);

    isize = (*nshg)*(*numVars);
    nitems = 3;
    iarray[ 0 ] = (*nshg);
    iarray[ 1 ] = (*numVars);
    iarray[ 2 ] = (*stepno);
    writeheader_( &irstou, "displacement", (void*)iarray, &nitems, &isize, "double", phasta_iotype );
    
        
    nitems = (*nshg)*(*numVars);
    writedatablock_( &irstou, "displacement", (void*)(array1), &nitems, "double", phasta_iotype );

    closefile_( &irstou, "append" );
    
}

void 
Write_Field(  int *pid,
              char* filemode,
	      char* fieldtag,
              int* tagsize,
	      void* array,
              char* arraytype,
	      int* nshg,
	      int* numvars,
	      int* stepno) {

    char rfile[32];
    // assuming restart.sn.(pid+1)
    sprintf(rfile,"restart.%d.%d",*stepno,*pid+1);

    char *fieldlabel = (char *)malloc((*tagsize+1)*sizeof(char));
    strncpy(fieldlabel, fieldtag, *tagsize);
    fieldlabel[*tagsize] = '\0';

    int irstou;
    int magic_number = 362436;
    int* mptr = &magic_number;
    time_t timenow = time ( &timenow);
    double version=0.0;
    int isize, nitems;
    int iarray[10];

    char fmode[10];
    if(!strncmp(filemode,"w",1))
      strcpy(fmode,"write");
    else // default is append
      strcpy(fmode,"append");

    char datatype[10];
    if(!strncmp(arraytype,"i",1))
      strcpy(datatype,"int");
    else // default is double
      strcpy(datatype,"double");

    openfile_(rfile, fmode, &irstou);

    nitems = 3; // assuming field will write 3 items in iarray
    iarray[ 0 ] = (*nshg);
    iarray[ 1 ] = (*numvars);
    iarray[ 2 ] = (*stepno);

    isize = (*nshg)*(*numvars);
    writeheader_( &irstou, fieldlabel, (void*)iarray, &nitems, &isize, datatype, phasta_iotype );

    nitems = (*nshg)*(*numvars);
    writedatablock_( &irstou, fieldlabel, array, &nitems, datatype, phasta_iotype );

    closefile_( &irstou, fmode);

    free(fieldlabel); 
}
